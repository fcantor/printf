.TH _PRINTF 3  2018-07-31 "Holberton" "Linux Programmer's Manual"
.SH NAME
_printf
.SH SYNOPSIS
.nf
.B #include <holberton.h>
.PP
.BI "int printf(const char *" format ", ...);"
.RE
.ad
.PD
.SH DESCRIPTION
The function 
.BR _printf ()
produces output according to a
.I format
as described below.
The function writes output to
.IR stdout ,
the standard output stream;
.PP
_printf writes the output under the control of a
.I format
string that specifies how subsequent arguments (or arguments accessed via
the variable-length argument facilities of
.BR stdarg (3))
are converted for output.
.SS Format of the format string
The format string is a character string composed of zero or more directives: 
ordinary characters (not
.BR % ),
which are copied unchanged to the output stream;
and conversion specifications, each of which results in fetching zero or
more subsequent arguments.
Each conversion specification is introduced by
the character
.BR % ,
and ends with a
.IR "conversion specifier" .
.PP
The arguments must correspond properly (after type promotion) with the
conversion specifier.
By default, the arguments are used in the order
given, and each conversion specifier asks for the next
argument (it is an error if insufficiently many arguments are given).
.SS Conversion specifiers
A character that specifies the type of conversion to be applied.
The conversion specifiers and their meanings are:
.TP
.BR d ", " i
The
.I int
argument is printed.
.TP
.BR c
The
.I char
argument is printed.
.TP
.BR s
The
.I string
argument is printed.
.SH RETURN VALUE
Upon successful return, these functions return the number of characters
printed (excluding the null byte used to end output to strings).
.SH NOTES
We are adding more conversion specifiers!
.SH BUGS
We still have many bugs!
.SH EXAMPLES
.TP
To print an integer: 
_printf("%d is an integer", 9);
.TP
To print a string:
_printf("My dog is a %s boy!", "good");
.TP
To print a character:
_printf("Dog begins with %c", 'D');
.TP
To print an integer variable:
_printf("%i is an int", x);
